# -*- coding: utf-8 -*-
"""Praktikum6 Inversi, Transformasi Logaritmik, Transformasi Powerlaw.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10H3DfaVGYA66OeMKzZm9GEa4JbLpX1p_

Caesar Noor 1207070025
"""

# impor library
import numpy as np
import imageio
import matplotlib.pyplot as plt

# memasukkan dan membaca variable gambar
img = imageio.imread("Tf.png")

# revolusi dan type gambar
img_height = img.shape[0]
img_width = img.shape[1]
img_channel = img.shape[2]

"""Inversi"""

# mengisi variable inversi gambar
img_inversi = np.zeros(img.shape, dtype=np.uint8)

# perhitungan fungsi inversi gambar grayscale
def inversi_grayscale(nilai):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = nilai - gray
            img_inversi[y][x] = (gray, gray, gray)

# perhitungan fungsi inversi gambar rgb
def inversi_rgb(nilai):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            red = nilai - red
            green = img[y][x][1]
            green = nilai - green
            blue = img[y][x][2]
            blue = nilai - blue
            img_inversi[y][x] = (red, green, blue)

# menampilkan hasil gambar inversi grayscale
inversi_grayscale(255)
plt.imshow(img_inversi)
plt.title("Inversi Grayscale")
plt.show()

# menampilkan hasil gambar inversi rgb 
inversi_rgb(255)
plt.imshow(img_inversi)
plt.title("Inversi RGB")
plt.show()

"""Log"""

# mengisi variable Log gambar
img_log = np.zeros(img.shape, dtype=np.uint8)

# perhitungan fungsi log gambar grayscale
def log(c):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(c * np.log(gray + 1))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_log[y][x] = (gray, gray, gray)

# menampilkan hasil gambar log grayscale 
log(30)
plt.imshow(img_log)
plt.title("Log")
plt.show()

"""Inversi & log"""

# mengisi variabel inlog gambar
img_inlog = np.zeros(img.shape, dtype=np.uint8)

# perhitungan fungsi inlog gambar grayscale 
def inlog(c):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(c * np.log(255 - gray + 1))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_inlog[y][x] = (gray, gray, gray)

# menampilkan hasil gambar inlog grayscale 
inlog(30)
plt.imshow(img_inlog)
plt.title("Inversi & Log")
plt.show()

"""Nth Power"""

# mengisi variable nth power gambar
img_nthpower = np.zeros(img.shape, dtype=np.uint8)

# perhitungan fungsi nthpower gambar grayscale 
def nthpower(c, y):
    thc = c / 100
    thy = y / 100
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(thc * pow(gray, thy))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_nthpower[y][x] = (gray, gray, gray)

# menampilkan hasil gambar nthpower grayscale 
nthpower(50, 100)
plt.imshow(img_nthpower)
plt.title("Nth Power")
plt.show()

"""Nth Root Power"""

# mengisi variable gambar nthrootpower 
img_nthrootpower = np.zeros(img.shape, dtype=np.uint8)

# perhitungan fungsi nthrootpower gambar grayscale 
def nthrootpower(c, y):
    thc = c / 100
    thy = y / 100
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(thc * pow(gray, 1./thy))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_nthpower[y][x] = (gray, gray, gray)

# menampilkan hasil gambar nthrootpower grayscale 
nthrootpower(50, 100)
plt.imshow(img_nthrootpower)
plt.title("Nth Root Power")
plt.show()